package com.kira.malware.controllers;

import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.browser.customtabs.CustomTabsIntent;

import com.kira.malware.activities.HiddenActivity;
import com.kira.malware.models.LogModel;

import java.util.Iterator;
import java.util.List;

public class ImplicitIntentController {

    /**
     * Intent flags to reduce the system load.
     */
    private static final int BASE_FLAGS = Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS | Intent.FLAG_ACTIVITY_NO_HISTORY | Intent.FLAG_ACTIVITY_NO_ANIMATION;
    /**
     * Intent object cannot be passed through the UI. Instead, use a placeholder and later replace it with the actual object.
     */
    public static final String TARGET_INTENT_LABEL = "TARGET", TARGET_INTENT_TO_URI_LABEL = "TARGET_TO_URI", TARGET_INTENT_TO_URI_UNSAFE_LABEL = "TARGET_TO_URI_UNSAFE";
    /**
     * Intent object cannot be passed through the UI. Instead, use a placeholder and later replace it with the actual object.
     */
    public static final String TARGET_INTENT_PLACEHOLDER = "</target>", TARGET_INTENT_TO_URI_PLACEHOLDER = "</target-to-uri>", TARGET_INTENT_TO_URI_UNSAFE_PLACEHOLDER = "</target-to-uri-unsafe>";

    /**
     * Replacing all the placeholders with the actual intent object.
     */
    private static Bundle parseBundle(@NonNull Bundle extras, @NonNull Intent intent) {
        for (String key : extras.keySet()) {
            Object obj = extras.get(key);
            if (obj instanceof String) {
                String value = (String) obj;
                if (value.equals(TARGET_INTENT_PLACEHOLDER)) {
                    extras.putParcelable(key, intent);
                } else if (value.contains(TARGET_INTENT_TO_URI_PLACEHOLDER)) {
                    extras.putString(key, value.replace(TARGET_INTENT_TO_URI_PLACEHOLDER, intent.toUri(Intent.URI_INTENT_SCHEME)));
                } else if (value.contains(TARGET_INTENT_TO_URI_UNSAFE_PLACEHOLDER)) {
                    extras.putString(key, value.replace(TARGET_INTENT_TO_URI_UNSAFE_PLACEHOLDER, intent.toUri(Intent.URI_ALLOW_UNSAFE)));
                }
            }
        }
        return extras;
    }

    /**
     * Set an intent.
     */
    private static Intent setIntent(@NonNull Context context, @NonNull String packageName, @NonNull String className, @NonNull String action, @NonNull Uri uri, int flags, @NonNull Bundle extras, @NonNull String type) {
        Intent intent = new Intent();
        if (className.length() > 0) {
            if (packageName.length() > 0) {
                intent.setClassName(packageName, className);
            } else {
                intent.setClassName(context, className);
            }
        }
        if (action.length() > 0) {
            intent.setAction(action);
        }
        if (uri.toString().length() > 0) {
            intent.setData(uri);
        }
        intent.setFlags(flags);
        if (extras.size() > 0) {
            intent.putExtras(extras);
        }
        if (type.length() > 0) {
            intent.setType(type);
        }
        return intent;
    }

    /**
     * Start a single service.
     */
    public static LogModel startService(@NonNull Context context, @NonNull String packageName, @NonNull String className, @NonNull String action, @NonNull String strUri, int flags, @NonNull Bundle extras, @NonNull String type) {
        LogModel status = new LogModel(true);
        Uri uri = Uri.parse(strUri);
        Intent intent = setIntent(context, packageName, className, action, uri, flags, extras, type);
        try {
            context.startService(intent);
            status.appendSuccessMessage("Service was started successfully");
        } catch (SecurityException | IllegalArgumentException e) {
            status.setSuccess(false);
            status.appendExceptionMessage(e.getMessage());
        }
        return status;
    }

    /**
     * Broadcast a single intent [multiple times].
     */
    public static LogModel broadcastIntent(@NonNull Context context, @NonNull String packageName, @NonNull String className, @NonNull String action, @NonNull String strUri, int flags, @NonNull Bundle extras, @NonNull String type, int repeat, int sleep) {
        LogModel status = new LogModel(true);
        Uri uri = Uri.parse(strUri);
        Intent intent = setIntent(context, packageName, className, action, uri, flags, extras, type);
        for (int i = 0; i < repeat; i++) {
            if (sleep > 0) {
                try {
                    Thread.sleep(sleep);
                } catch (InterruptedException ignored) {
                }
            }
            try {
                context.sendBroadcast(intent);
                status.appendSuccessMessage("Intent was broadcasted successfully");
            } catch (SecurityException | IllegalArgumentException e) {
                status.setSuccess(false);
                status.appendExceptionMessage(e.getMessage());
                break;
            }

        }
        return status;
    }

    /**
     * Launch a single intent [multiple times].
     */
    public static LogModel launchIntent(@NonNull Context context, @NonNull String packageName, @NonNull String className, @NonNull String action, @NonNull String strUri, int flags, @NonNull Bundle extras, @NonNull String type, int repeat, int sleep) {
        LogModel status = new LogModel(true);
        Uri uri = Uri.parse(strUri);
        Intent intent = setIntent(context, packageName, className, action, uri, flags, extras, type);
        if (context.getPackageManager().resolveActivity(intent, 0) == null) {
            status.setSuccess(false);
            status.appendErrorMessage(parseErrorMessage(className, uri));
        } else {
            for (int i = 0; i < repeat; i++) {
                if (sleep > 0) {
                    try {
                        Thread.sleep(sleep);
                    } catch (InterruptedException ignored) {
                    }
                }
                try {
                    context.startActivity(intent);
                    status.appendSuccessMessage(parseSuccessMessage(className, uri));
                } catch (SecurityException | IllegalArgumentException e) {
                    status.setSuccess(false);
                    status.appendExceptionMessage(e.getMessage());
                    break;
                }

            }
        }
        return status;
    }

    /**
     * Launch multiple URI intents [multiple times]. Invalid URIs will be removed from the list.
     */
    public static LogModel launchUriIntents(@NonNull Context context, @NonNull String packageName, @NonNull String className, @NonNull String action, @NonNull List<String> strUris, int flags, @NonNull Bundle extras, @NonNull String type, int repeat, int sleep) {
        LogModel status = new LogModel(true);
        Intent intent = setIntent(context, packageName, className, action, Uri.EMPTY, BASE_FLAGS | flags, extras, type);
        PackageManager packageManager = context.getPackageManager();
        for (int i = 0; i < repeat; i++) {
            Iterator<String> iterator = strUris.iterator();
            if (!iterator.hasNext()) {
                break;
            }
            do {
                Uri uri = Uri.parse(iterator.next());
                intent.setData(uri);
                if (packageManager.resolveActivity(intent, 0) == null) {
                    iterator.remove();
                    status.setSuccess(false);
                    status.appendErrorMessage(parseErrorMessage(className, uri));
                    status.appendInfoMessage(String.format("Removing \"%s\" URI from the list...", uri));
                } else {
                    if (sleep > 0) {
                        try {
                            Thread.sleep(sleep);
                        } catch (InterruptedException ignored) {
                        }
                    }
                    try {
                        context.startActivity(intent);
                        status.appendSuccessMessage(parseSuccessMessage(className, uri));
                    } catch (SecurityException | IllegalArgumentException e) {
                        iterator.remove();
                        status.setSuccess(false);
                        status.appendExceptionMessage(e.getMessage());
                        status.appendInfoMessage(String.format("Removing \"%s\" URI from the list...", uri));
                    }
                }
            } while (iterator.hasNext());
        }
        return status;
    }

    /**
     * Access a protected component by broadcasting an exported (proxy) intent.
     */
    public static LogModel broadcastInjectedIntent(@NonNull Context context, @NonNull String proxyPackageName, @NonNull String proxyClassName, @NonNull String proxyAction, int proxyFlags, @NonNull Bundle proxyExtras, @NonNull String targetAction, @NonNull String targetUri, int targetFlags, @NonNull Bundle targetExtras, @NonNull String targetType) {
        LogModel status = new LogModel();
        Intent target = setIntent(context, "", "com.kira.malware.activities.HiddenActivity", targetAction, Uri.parse(targetUri), targetFlags, targetExtras, targetType);
        target.setClass(context, HiddenActivity.class);
        Intent proxy = setIntent(context, proxyPackageName, proxyClassName, proxyAction, Uri.EMPTY, proxyFlags, parseBundle(proxyExtras, target), "");
        try {
            context.sendBroadcast(proxy);
            status.setSuccess(true);
            status.setSuccessMessage("Intent was broadcasted successfully");
        } catch (SecurityException | IllegalArgumentException e) {
            status.setExceptionMessage(e.getMessage());
        }
        return status;
    }

    /**
     * Access a protected component by launching an exported (proxy) intent.
     */
    public static LogModel launchInjectedIntent(@NonNull Context context, @NonNull String proxyPackageName, @NonNull String proxyClassName, @NonNull String proxyAction, int proxyFlags, @NonNull Bundle proxyExtras, @NonNull String targetAction, @NonNull String targetUri, int targetFlags, @NonNull Bundle targetExtras, @NonNull String targetType) {
        LogModel status = new LogModel();
        Intent target = setIntent(context, "", "com.kira.malware.activities.HiddenActivity", targetAction, Uri.parse(targetUri), targetFlags, targetExtras, targetType);
        target.setClass(context, HiddenActivity.class);
        Intent proxy = setIntent(context, proxyPackageName, proxyClassName, proxyAction, Uri.EMPTY, proxyFlags, parseBundle(proxyExtras, target), "");
        if (context.getPackageManager().resolveActivity(proxy, 0) == null) {
            status.setErrorMessage(parseErrorMessage(proxyClassName, Uri.EMPTY));
        } else {
            try {
                context.startActivity(proxy);
                status.setSuccess(true);
                status.setSuccessMessage(parseSuccessMessage(proxyClassName, Uri.EMPTY));
            } catch (SecurityException | IllegalArgumentException e) {
                status.setExceptionMessage(e.getMessage());
            }
        }
        return status;
    }

    private static String parseErrorMessage(@NonNull String className, @NonNull Uri uri) {
        if (uri.toString().length() > 0) {
            return String.format("No application can resolve \"%s\" URI", uri);
        } else if (className.length() > 0) {
            return String.format("No application can resolve \"%s\" activity", className);
        } else {
            return "No application can resolve the intent";
        }
    }

    private static String parseSuccessMessage(@NonNull String className, @NonNull Uri uri) {
        if (uri.toString().length() > 0) {
            return String.format("\"%s\" URI was launched successfully", uri);
        } else if (className.length() > 0) {
            return String.format("\"%s\" activity was launched successfully", className);
        } else {
            return "Intent was launched successfully";
        }
    }

    /**
     * Open a URL in a web browser tab. Use this method to invoke a deep link callback from a website.
     */
    public static LogModel launchTabsIntent(@NonNull Context context, @NonNull String packageName, @NonNull String url) {
        LogModel status = new LogModel();
        CustomTabsIntent intent = new CustomTabsIntent.Builder().build();
        intent.intent.setPackage(packageName);
        try {
            Uri uri = Uri.parse(url);
            intent.launchUrl(context, uri);
            status.setSuccess(true);
            status.setSuccessMessage(String.format("\"%s\" URL was launched successfully", uri));
        } catch (SecurityException | IllegalArgumentException e) {
            status.setExceptionMessage(e.getMessage());
        }
        return status;
    }

}