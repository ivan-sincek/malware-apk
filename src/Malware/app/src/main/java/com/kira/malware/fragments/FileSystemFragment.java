package com.kira.malware.fragments;

import android.content.Context;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.activity.OnBackPressedCallback;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;

import com.google.android.material.textfield.TextInputEditText;

import com.kira.malware.controllers.DirectoryController;
import com.kira.malware.controllers.FileController;
import com.kira.malware.controllers.LogController;
import com.kira.malware.controllers.SharedPreferencesController;
import com.kira.malware.models.LogModel;
import com.kira.malware.R;

import java.io.File;

public class FileSystemFragment extends Fragment {

    private OnBackPressedCallback callback;
    private Context context;
    private SharedPreferencesController spc;
    private LogController log;
    private TextInputEditText inputPath;
    private String path = "";

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_file_system, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        this.context = view.getContext();
        this.spc = SharedPreferencesController.getInstance(this.context);
        this.log = new LogController(view);
        this.log.appendText("Tip #1: Read or overwrite files from other apps");
        this.log.appendText("");
        this.log.appendText("Tip #2: Read world-readable shared preferences from other apps");

        this.path = this.spc.getString("fs_path", this.context.getFilesDir() + File.separator);

        this.inputPath = view.findViewById(R.id.text_input_fs_path);
        this.inputPath.setText(this.path);
        this.inputPath.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                path = editable.toString().trim();
            }
        });

        view.findViewById(R.id.button_fs_directory_delete).setOnClickListener(v -> {
            this.log.viewStatusMessage(DirectoryController.delete(this.path));
        });

        view.findViewById(R.id.button_fs_directory_create).setOnClickListener(v -> {
            this.log.viewStatusMessage(DirectoryController.create(this.path));
        });

        view.findViewById(R.id.button_fs_directory_list).setOnClickListener(v -> {
            this.log.viewStatusMessage(DirectoryController.list(this.path));
        });

        view.findViewById(R.id.button_fs_file_delete).setOnClickListener(v -> {
            this.log.viewStatusMessage(FileController.delete(this.path));
        });

        view.findViewById(R.id.button_fs_file_create).setOnClickListener(v -> {
            this.log.viewStatusMessage(FileController.create(this.path));
        });

        view.findViewById(R.id.button_fs_file_read).setOnClickListener(v -> {
            this.log.viewStatusMessage(FileController.read(this.path));
        });

        view.findViewById(R.id.button_fs_file_edit).setOnClickListener(v -> {
            if (!FileController.exists(this.path)) { // NOTE: Show the edit file view if the file does not exist, and create a new one on save.
                this.showEditFile(true);
            } else {
                LogModel status = FileController.read(this.path);
                if (status.getSuccess()) {
                    this.showEditFile(true);
                }
                this.log.viewStatusMessage(status);
            }
        });

        this.log.getSave().setOnClickListener(v -> {
            LogModel status = FileController.edit(this.path, this.log.getText());
            this.showEditFile(false);
            this.log.viewStatusMessage(status);
        });

        this.log.getCancel().setOnClickListener(v -> {
            this.showEditFile(false);
        });
    }

    /**
     * Show the edit file view.
     */
    private void showEditFile(boolean visible) {
        View view = this.requireView();
        view.findViewById(R.id.linear_layout_fs_buttons).setVisibility(visible ? View.GONE : View.VISIBLE);
        this.log.showEditFile(visible);
        this.callback.setEnabled(visible);
    }

    @Override
    public void onAttach(@NonNull Context context) {
        super.onAttach(context);
        this.callback = new OnBackPressedCallback(false) {
            @Override
            public void handleOnBackPressed() {
                showEditFile(false);
            }
        };
        this.requireActivity().getOnBackPressedDispatcher().addCallback(this, this.callback);
    }

    @Override
    public void onDetach() {
        super.onDetach();
        this.callback.remove();
    }

    @Override
    public void onResume() {
        super.onResume();

        if (this.requireView().findViewById(R.id.linear_layout_fs_buttons).getVisibility() == View.GONE) {
            this.callback.setEnabled(true);
        }

        this.path = this.spc.getString("fs_path", this.context.getFilesDir() + File.separator);

        this.inputPath.setText(this.path);
    }

    @Override
    public void onPause() {
        super.onPause();

        if (this.requireView().findViewById(R.id.linear_layout_fs_buttons).getVisibility() == View.GONE) {
            this.callback.setEnabled(false);
        }

        this.spc.putString("fs_path", this.path);
    }

}