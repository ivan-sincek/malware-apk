package com.kira.malware.fragments;

import android.content.Context;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.activity.OnBackPressedCallback;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;

import com.google.android.material.textfield.TextInputEditText;

import com.kira.malware.controllers.ImplicitIntentController;
import com.kira.malware.controllers.IntentFlagsController;
import com.kira.malware.controllers.IntentPutExtrasController;
import com.kira.malware.controllers.LogController;
import com.kira.malware.controllers.SharedPreferencesController;
import com.kira.malware.models.LogModel;
import com.kira.malware.R;

public class ImplicitIntentInjectionFragment extends Fragment {

    private OnBackPressedCallback callback;
    private Context context;
    private SharedPreferencesController spc;
    private LogController log;
    private TextInputEditText inputProxyPackageName, inputProxyClassName, inputProxyAction, inputTargetAction, inputTargetUri;
    private String proxyPackageName = "", proxyClassName = "", proxyAction = "", targetAction = "", targetUri = "";
    private IntentFlagsController flags;
    private IntentPutExtrasController extras;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_implicit_intent_injection, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        this.context = view.getContext();
        this.spc = SharedPreferencesController.getInstance(this.context);
        this.log = new LogController(view);
        this.log.appendText("Tip #1: Access a protected component using an exported (proxy) intent");
        this.log.appendText("");
        this.log.appendText("Tip #2: It is common to access a private file or SQLite content provider");

        this.proxyPackageName = this.spc.getString("implicit_injection_proxy_package_name", this.proxyPackageName);
        this.proxyClassName = this.spc.getString("implicit_injection_proxy_class_name", this.proxyClassName);
        this.proxyAction = this.spc.getString("implicit_injection_proxy_action", this.proxyAction);
        this.targetAction = this.spc.getString("implicit_injection_target_action", this.targetAction);
        this.targetUri = this.spc.getString("implicit_injection_target_uri", this.targetUri);

        this.flags = new IntentFlagsController(view, false);
        this.flags.show(this.spc.getString("implicit_injection_flags", ""));

        this.extras = new IntentPutExtrasController(view, false);
        this.extras.show(this.spc.getString("implicit_injection_extras", ""));

        this.inputProxyPackageName = view.findViewById(R.id.text_input_implicit_injection_proxy_package_name);
        this.inputProxyPackageName.setText(this.proxyPackageName);
        this.inputProxyPackageName.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                proxyPackageName = editable.toString().trim();
            }
        });

        this.inputProxyClassName = view.findViewById(R.id.text_input_implicit_injection_proxy_class_name);
        this.inputProxyClassName.setText(this.proxyClassName);
        this.inputProxyClassName.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                proxyClassName = editable.toString().trim();
            }
        });

        this.inputProxyAction = view.findViewById(R.id.text_input_implicit_injection_proxy_action);
        this.inputProxyAction.setText(this.proxyAction);
        this.inputProxyAction.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                proxyAction = editable.toString().trim();
            }
        });

        this.inputTargetAction = view.findViewById(R.id.text_input_implicit_injection_target_action);
        this.inputTargetAction.setText(this.targetAction);
        this.inputTargetAction.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                targetAction = editable.toString().trim();
            }
        });

        this.inputTargetUri = view.findViewById(R.id.text_input_implicit_injection_target_uri);
        this.inputTargetUri.setText(this.targetUri);
        this.inputTargetUri.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                targetUri = editable.toString().trim();
            }
        });

        view.findViewById(R.id.button_implicit_injection_put_extras).setOnClickListener(v -> {
            this.showPutExtras(true);
        });

        this.extras.getClose().setOnClickListener(v -> {
            this.showPutExtras(false);
        });

        view.findViewById(R.id.button_implicit_injection_proxy_broadcast).setOnClickListener(v -> {
            LogModel status = new LogModel();
            LogModel proxy = this.extras.getProxyExtras();
            if (!proxy.getSuccess()) {
                status.appendMessage(proxy.getMessage());
            }
            LogModel target = this.extras.getTargetExtras();
            if (!target.getSuccess()) {
                status.appendMessage(target.getMessage());
            }
            if (status.getMessage().length() < 1) {
                status = ImplicitIntentController.broadcastInjectedIntent(this.context, this.proxyPackageName, this.proxyClassName, this.proxyAction, this.flags.getProxyFlags(), proxy.getBundle(), this.targetAction, this.targetUri, this.flags.getTargetFlags(), target.getBundle(), "");
            }
            this.log.viewStatusMessage(status);
        });

        view.findViewById(R.id.button_implicit_injection_proxy_launch).setOnClickListener(v -> {
            LogModel status = new LogModel();
            LogModel proxy = this.extras.getProxyExtras();
            if (!proxy.getSuccess()) {
                status.appendMessage(proxy.getMessage());
            }
            LogModel target = this.extras.getTargetExtras();
            if (!target.getSuccess()) {
                status.appendMessage(target.getMessage());
            }
            if (status.getMessage().length() < 1) {
                status = ImplicitIntentController.launchInjectedIntent(this.context, this.proxyPackageName, this.proxyClassName, this.proxyAction, this.flags.getProxyFlags(), proxy.getBundle(), this.targetAction, this.targetUri, this.flags.getTargetFlags(), target.getBundle(), "");
            }
            this.log.viewStatusMessage(status);
        });
    }

    /**
     * Show the intent put extras view.
     */
    private void showPutExtras(boolean visible) {
        View view = this.requireView();
        view.findViewById(R.id.linear_layout_implicit_injection_main).setVisibility(visible ? View.GONE : View.VISIBLE);
        view.findViewById(R.id.include_put_extras).setVisibility(visible ? View.VISIBLE : View.GONE);
        this.callback.setEnabled(visible);
    }

    @Override
    public void onAttach(@NonNull Context context) {
        super.onAttach(context);
        this.callback = new OnBackPressedCallback(false) {
            @Override
            public void handleOnBackPressed() {
                showPutExtras(false);
            }
        };
        this.requireActivity().getOnBackPressedDispatcher().addCallback(this, this.callback);
    }

    @Override
    public void onDetach() {
        this.callback.remove();
        super.onDetach();
    }

    @Override
    public void onResume() {
        if (this.requireView().findViewById(R.id.linear_layout_implicit_injection_main).getVisibility() == View.GONE) {
            this.callback.setEnabled(true);
        }

        this.proxyPackageName = this.spc.getString("implicit_injection_proxy_package_name", this.proxyPackageName);
        this.proxyClassName = this.spc.getString("implicit_injection_proxy_class_name", this.proxyClassName);
        this.proxyAction = this.spc.getString("implicit_injection_proxy_action", this.proxyAction);
        this.targetAction = this.spc.getString("implicit_injection_target_action", this.targetAction);
        this.targetUri = this.spc.getString("implicit_injection_target_uri", this.targetUri);

        this.flags.show(this.spc.getString("implicit_injection_flags", ""));
        this.extras.show(this.spc.getString("implicit_injection_extras", ""));

        this.inputProxyPackageName.setText(this.proxyPackageName);
        this.inputProxyClassName.setText(this.proxyClassName);
        this.inputProxyAction.setText(this.proxyAction);
        this.inputTargetAction.setText(this.targetAction);
        this.inputTargetUri.setText(this.targetUri);

        super.onResume();
    }

    @Override
    public void onPause() {
        super.onPause();

        if (this.requireView().findViewById(R.id.linear_layout_implicit_injection_main).getVisibility() == View.GONE) {
            this.callback.setEnabled(false);
        }

        this.spc.putString("implicit_injection_proxy_package_name", this.proxyPackageName);
        this.spc.putString("implicit_injection_proxy_class_name", this.proxyClassName);
        this.spc.putString("implicit_injection_proxy_action", this.proxyAction);
        this.spc.putString("implicit_injection_target_action", this.targetAction);
        this.spc.putString("implicit_injection_target_uri", this.targetUri);
        this.spc.putString("implicit_injection_flags", this.flags.toJson());
        this.spc.putString("implicit_injection_extras", this.extras.toJson());
    }

}