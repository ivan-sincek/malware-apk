package com.kira.malware.controllers;

import androidx.annotation.NonNull;

import com.kira.malware.models.LogModel;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public class FileController {

    private static final int BUFFER_SIZE = 2048;
    private static final Charset ENCODING = StandardCharsets.UTF_8;

    public static boolean exists(@NonNull String path) {
        return (new File(path)).exists();
    }

    public static LogModel create(@NonNull String path) {
        LogModel status = new LogModel();
        File file = new File(path);
        String abs = file.getAbsolutePath();
        if (file.isDirectory()) {
            status.setErrorMessage(String.format("\"%s\" is directory", abs));
        } else if (file.exists()) {
            status.setErrorMessage(String.format("\"%s\" already exists", abs));
        } else {
            try {
                if (!file.createNewFile()) {
                    status.setErrorMessage(String.format("Cannot create \"%s\"", abs));
                } else {
                    status.setSuccess(true);
                    status.setSuccessMessage(String.format("\"%s\" was created successfully", abs));
                }
            } catch (IOException e) {
                status.setExceptionMessage(e.getMessage());
            }
        }
        return status;
    }

    public static LogModel read(@NonNull String path) {
        LogModel status = new LogModel();
        File file = new File(path);
        String abs = file.getAbsolutePath();
        if (file.isDirectory()) {
            status.setErrorMessage(String.format("\"%s\" is directory", abs));
        } else if (!file.exists()) {
            status.setErrorMessage(String.format("\"%s\" does not exist", abs));
        } else {
            try (FileInputStream fileStream = new FileInputStream(file)) {
                byte[] buffer = new byte[BUFFER_SIZE];
                int bytes;
                while ((bytes = fileStream.read(buffer)) > 0) {
                    status.appendMessage(new String(buffer, 0, bytes));
                }
                status.setSuccess(true);
            } catch (IOException e) {
                status.setExceptionMessage(e.getMessage());
            }
        }
        return status;
    }

    /**
     * Call LogModel.getStrings() to return "List&lt;String&gt;".
     */
    public static LogModel readList(@NonNull String path) {
        LogModel status = new LogModel();
        File file = new File(path);
        String abs = file.getAbsolutePath();
        if (file.isDirectory()) {
            status.setErrorMessage(String.format("\"%s\" is directory", abs));
        } else if (!file.exists()) {
            status.setErrorMessage(String.format("\"%s\" does not exist", abs));
        } else if (file.length() < 1) {
            status.setErrorMessage(String.format("\"%s\" is empty", abs));
        } else {
            try (FileReader fileReader = new FileReader(file); BufferedReader bufferedReader = new BufferedReader(fileReader)) {
                List<String> strings = new ArrayList<>();
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    status.appendMessage(line);
                    strings.add(line);
                }
                status.setSuccess(true);
                status.setObject(strings);
            } catch (IOException e) {
                status.setExceptionMessage(e.getMessage());
            }
        }
        return status;
    }

    public static LogModel edit(@NonNull String path, @NonNull String text) {
        LogModel status = new LogModel();
        File file = new File(path);
        String abs = file.getAbsolutePath();
        boolean created = false;
        if (file.isDirectory()) {
            status.setErrorMessage(String.format("\"%s\" is directory", abs));
        } else if (!file.exists()) {
            try {
                if (!file.createNewFile()) {
                    status.setErrorMessage(String.format("Cannot create \"%s\"", abs));
                } else {
                    created = true;
                }
            } catch (IOException e) {
                status.setExceptionMessage(e.getMessage());
            }
        }
        if (status.getMessage().length() < 1) {
            try (FileOutputStream fileStream = new FileOutputStream(file)) {
                fileStream.write(text.getBytes(ENCODING));
                status.setSuccess(true);
                status.setSuccessMessage(String.format(created ? "\"%s\" was created and edited successfully" : "\"%s\" was created successfully", abs));
            } catch (IOException e) {
                status.setExceptionMessage(e.getMessage());
            }
        }
        return status;
    }

    public static LogModel delete(@NonNull String path) {
        LogModel status = new LogModel();
        File file = new File(path);
        String abs = file.getAbsolutePath();
        if (file.isDirectory()) {
            status.setErrorMessage(String.format("\"%s\" is directory", abs));
        } else if (!file.exists()) {
            status.setErrorMessage(String.format("\"%s\" does not exist", abs));
        } else if (!file.delete()) {
            status.setErrorMessage(String.format("Cannot delete \"%s\"", abs));
        } else {
            status.setSuccess(true);
            status.setSuccessMessage(String.format("\"%s\" was deleted successfully", abs));
        }
        return status;
    }

}