package com.kira.malware.fragments;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Environment;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.activity.OnBackPressedCallback;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;

import com.google.android.material.textfield.TextInputEditText;

import com.kira.malware.controllers.FileController;
import com.kira.malware.controllers.IntentFlagsController;
import com.kira.malware.controllers.LogController;
import com.kira.malware.controllers.ImplicitIntentController;
import com.kira.malware.controllers.IntentPutExtrasController;
import com.kira.malware.controllers.SharedPreferencesController;
import com.kira.malware.models.LogModel;
import com.kira.malware.R;

import java.io.File;

public class ImplicitIntentFragment extends Fragment {

    private OnBackPressedCallback callback;
    private Context context;
    private SharedPreferencesController spc;
    private LogController log;
    private TextInputEditText inputPackageName, inputClassName, inputAction, inputUri, inputRepeat, inputSleep, inputFile;
    private String packageName = "com.kira.malware", className = "com.kira.malware.activities.HiddenActivity", action = Intent.ACTION_VIEW, uri = "kira://hidden"; // NOTE: Other URIs: content://com.kira.malware.TestSQLiteProvider | content://com.kira.malware.TestFileProvider/files/somefile.txt
    private int repeat = 1, sleep = 0;
    private String file = Environment.getExternalStorageDirectory() + File.separator;
    private IntentFlagsController flags;
    private IntentPutExtrasController extras;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_implicit_intent, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        this.context = view.getContext();
        this.spc = SharedPreferencesController.getInstance(this.context);
        this.log = new LogController(view);
        this.log.appendText("Tip #1: Test a [pending] implicit intent");
        this.log.appendText("");
        this.log.appendText("Tip #2: Perform a DoS on a [pending] implicit intent");
        this.log.appendText("");
        this.log.appendText("Tip #3: Test a deep link");
        this.log.appendText("");
        this.log.appendText("Tip #4: Intercept a deep link by specifying it in \"AndroidManifest.xml\" under \"HiddenActivity\" before building the APK\n<data\n\t\tandroid:host=\"hidden\"\n\t\tandroid:scheme=\"kira\"\n/>");

        this.packageName = this.spc.getString("implicit_package_name", this.packageName);
        this.className = this.spc.getString("implicit_class_name", this.className);
        this.action = this.spc.getString("implicit_action", this.action);
        this.uri = this.spc.getString("implicit_uri", this.uri);
        this.repeat = this.spc.getInt("implicit_repeat", this.repeat);
        this.sleep = this.spc.getInt("implicit_sleep", this.sleep);
        this.file = this.spc.getString("implicit_file", this.file);

        this.flags = new IntentFlagsController(view, true);
        this.flags.show(this.spc.getString("implicit_flags", ""));

        this.extras = new IntentPutExtrasController(view, true);
        this.extras.show(this.spc.getString("implicit_extras", ""));

        this.inputPackageName = view.findViewById(R.id.text_input_implicit_intent_package_name);
        this.inputPackageName.setText(this.packageName);
        this.inputPackageName.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                packageName = editable.toString().trim();
            }
        });

        this.inputClassName = view.findViewById(R.id.text_input_implicit_intent_class_name);
        this.inputClassName.setText(this.className);
        this.inputClassName.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                className = editable.toString().trim();
            }
        });

        this.inputAction = view.findViewById(R.id.text_input_implicit_intent_action);
        this.inputAction.setText(this.action);
        this.inputAction.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                action = editable.toString().trim();
            }
        });

        this.inputUri = view.findViewById(R.id.text_input_implicit_intent_uri);
        this.inputUri.setText(this.uri);
        this.inputUri.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                uri = editable.toString().trim();
            }
        });

        this.inputRepeat = view.findViewById(R.id.text_input_implicit_repeat);
        this.inputRepeat.setText(this.repeat > 1 ? String.valueOf(this.repeat) : "");
        this.inputRepeat.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                String text = editable.toString().trim();
                try {
                    repeat = text.length() > 0 ? Integer.parseInt(text) : 1;
                } catch (NumberFormatException ignored) {
                    repeat = 1;
                    inputRepeat.setText("");
                }
            }
        });

        this.inputSleep = view.findViewById(R.id.text_input_implicit_sleep);
        this.inputSleep.setText(this.sleep > 0 ? String.valueOf(this.sleep) : "");
        this.inputSleep.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                String text = editable.toString().trim();
                try {
                    sleep = text.length() > 0 ? Integer.parseInt(text) : 0;
                } catch (NumberFormatException ignored) {
                    sleep = 0;
                    inputSleep.setText("");
                }
            }
        });

        this.inputFile = view.findViewById(R.id.text_input_implicit_file);
        this.inputFile.setText(this.file);
        this.inputFile.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                file = editable.toString().trim();
            }
        });

        view.findViewById(R.id.button_implicit_put_extras).setOnClickListener(v -> {
            this.showPutExtras(true);
        });

        this.extras.getClose().setOnClickListener(v -> {
            this.showPutExtras(false);
        });

        view.findViewById(R.id.button_implicit_intent_broadcast).setOnClickListener(v -> {
            LogModel status = new LogModel();
            if (this.repeat < 1) {
                status.appendErrorMessage("Repeat must be greater than zero");
            }
            if (this.sleep < 0) {
                status.appendErrorMessage("Sleep must be equal to or greater than zero");
            }
            LogModel intent = this.extras.getIntentExtras();
            if (!intent.getSuccess()) {
                status.appendMessage(intent.getMessage());
            }
            if (status.getMessage().length() < 1) {
                status = ImplicitIntentController.broadcastIntent(this.context, this.packageName, this.className, this.action, this.uri, this.flags.getIntentFlags(), intent.getBundle(), "", this.repeat, this.sleep);
            }
            this.log.viewStatusMessage(status);
        });

        view.findViewById(R.id.button_implicit_intent_launch).setOnClickListener(v -> {
            LogModel status = new LogModel();
            if (this.repeat < 1) {
                status.appendErrorMessage("Repeat must be greater than zero");
            }
            if (this.sleep < 0) {
                status.appendErrorMessage("Sleep must be equal to or greater than zero");
            }
            LogModel intent = this.extras.getIntentExtras();
            if (!intent.getSuccess()) {
                status.appendMessage(intent.getMessage());
            }
            if (status.getMessage().length() < 1) {
                status = ImplicitIntentController.launchIntent(this.context, this.packageName, this.className, this.action, this.uri, this.flags.getIntentFlags(), intent.getBundle(), "", this.repeat, this.sleep);
            }
            this.log.viewStatusMessage(status);
        });

        view.findViewById(R.id.button_implicit_intent_launch_file).setOnClickListener(v -> {
            LogModel status = new LogModel();
            if (this.repeat < 1) {
                status.appendErrorMessage("Repeat must be greater than zero");
            }
            if (this.sleep < 0) {
                status.appendErrorMessage("Sleep must be equal to or greater than zero");
            }
            LogModel uris = FileController.readList(this.file);
            if (!uris.getSuccess()) {
                status.appendMessage(uris.getMessage());
            }
            LogModel intent = this.extras.getIntentExtras();
            if (!intent.getSuccess()) {
                status.appendMessage(intent.getMessage());
            }
            if (status.getMessage().length() < 1) {
                status = ImplicitIntentController.launchUriIntents(this.context, this.packageName, this.className, this.action, uris.getStrings(), this.flags.getIntentFlags(), intent.getBundle(), "", this.repeat, this.sleep);
            }
            this.log.viewStatusMessage(status);
        });
    }

    /**
     * Show the intent put extras view.
     */
    private void showPutExtras(boolean visible) {
        View view = this.requireView();
        view.findViewById(R.id.linear_layout_implicit_main).setVisibility(visible ? View.GONE : View.VISIBLE);
        view.findViewById(R.id.include_put_extras).setVisibility(visible ? View.VISIBLE : View.GONE);
        this.callback.setEnabled(visible);
    }

    @Override
    public void onAttach(@NonNull Context context) {
        super.onAttach(context);
        this.callback = new OnBackPressedCallback(false) {
            @Override
            public void handleOnBackPressed() {
                showPutExtras(false);
            }
        };
        this.requireActivity().getOnBackPressedDispatcher().addCallback(this, this.callback);
    }

    @Override
    public void onDetach() {
        super.onDetach();
        this.callback.remove();
    }

    @Override
    public void onResume() {
        super.onResume();

        if (this.requireView().findViewById(R.id.linear_layout_implicit_main).getVisibility() == View.GONE) {
            this.callback.setEnabled(true);
        }

        this.packageName = this.spc.getString("implicit_package_name", this.packageName);
        this.className = this.spc.getString("implicit_class_name", this.className);
        this.action = this.spc.getString("implicit_action", this.action);
        this.uri = this.spc.getString("implicit_uri", this.uri);
        this.repeat = this.spc.getInt("implicit_repeat", this.repeat);
        this.sleep = this.spc.getInt("implicit_sleep", this.sleep);
        this.file = this.spc.getString("implicit_file", this.file);

        this.flags.show(this.spc.getString("implicit_flags", ""));
        this.extras.show(this.spc.getString("implicit_extras", ""));

        this.inputPackageName.setText(this.packageName);
        this.inputClassName.setText(this.className);
        this.inputAction.setText(this.action);
        this.inputUri.setText(this.uri);
        this.inputRepeat.setText(this.repeat > 1 ? String.valueOf(this.repeat) : "");
        this.inputSleep.setText(this.sleep > 0 ? String.valueOf(this.sleep) : "");
        this.inputFile.setText(this.file);
    }

    @Override
    public void onPause() {
        super.onPause();

        if (this.requireView().findViewById(R.id.linear_layout_implicit_main).getVisibility() == View.GONE) {
            this.callback.setEnabled(false);
        }

        this.spc.putString("implicit_package_name", this.packageName);
        this.spc.putString("implicit_class_name", this.className);
        this.spc.putString("implicit_action", this.action);
        this.spc.putString("implicit_uri", this.uri);
        this.spc.putInt("implicit_repeat", this.repeat);
        this.spc.putInt("implicit_sleep", this.sleep);
        this.spc.putString("implicit_file", this.file);
        this.spc.putString("implicit_flags", this.flags.toJson());
        this.spc.putString("implicit_extras", this.extras.toJson());
    }

}