package com.kira.malware.controllers;

import android.app.AlertDialog;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.HorizontalScrollView;
import android.widget.LinearLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;

import com.kira.malware.models.LogModel;
import com.kira.malware.R;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class ManageStatesController {

    private Context context;
    private SharedPreferencesController spc;
    private LogController log;
    private LinearLayout layout;
    private List<File> files;
    private static final int SCROLL_VIEW = 0, MAIN_LABEL = 0, LOAD_BUTTON = 1, DELETE_BUTTON = 2;
    private static final String PREFIX = "state.", SUFFIX = ".xml";

    public ManageStatesController(@NonNull View view) {
        this.context = view.getContext();
        this.spc = SharedPreferencesController.getInstance(this.context);
        this.log = new LogController(view);

        this.layout = view.findViewById(R.id.linear_layout_states);

        this.files = new ArrayList<>();
        LogModel status = DirectoryController.list(this.context.getDataDir() + File.separator + "shared_prefs" + File.separator);
        if (!status.getSuccess()) {
            this.log.viewStatusMessage(status);
        } else {
            for (File file : status.getFiles()) {
                if (file.isFile() && file.getName().startsWith(PREFIX)) {
                    this.files.add(file);
                }
            }
        }
    }

    /**
     * Add UI states to the UI.
     */
    public void show() {
        this.layout.removeAllViews();
        for (File file : this.files) {
            this.add(file);
        }
    }

    private void add(@NonNull File file) {
        LinearLayout row = ((LayoutInflater) this.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.state, null).findViewById(R.id.linear_layout_state);
        row.setId(View.generateViewId());

        if (this.layout.getChildCount() > 0) {
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            layoutParams.setMargins(0, 10, 0, 0); // NOTE: Adding some spacing between entries.
            row.setLayoutParams(layoutParams);
        }

        ((TextView) ((HorizontalScrollView) row.getChildAt(SCROLL_VIEW)).getChildAt(MAIN_LABEL)).setText(file.getName());

        row.getChildAt(LOAD_BUTTON).setOnClickListener(v -> {
            this.log.viewStatusMessage(this.spc.load(this.stripSuffix(file.getName())));
        });

        row.getChildAt(DELETE_BUTTON).setOnClickListener(v -> {
            new AlertDialog.Builder(this.context).setTitle("Confirm Deletion").setMessage(String.format("Delete the \"%s\" UI state?", file.getName())).setPositiveButton("Yes", (dialogInterface, i) -> {
                LogModel status = FileController.delete(file.getAbsolutePath());
                if (status.getSuccess()) {
                    this.layout.removeView(row);
                    this.files.remove(file);
                }
                this.log.viewStatusMessage(status);
            }).setNegativeButton("No", (dialogInterface, i) -> {
                dialogInterface.dismiss();
            }).create().show();
        });

        this.layout.addView(row);
    }

    /**
     * Save the current UI state in a shared preferences file.
     */
    public void save(@NonNull String name) {
        LogModel status = new LogModel();
        if (name.length() < 1) {
            status.setErrorMessage("Name is required");
        } else if (!name.matches("[a-zA-Z0-9_]+")) {
            status.setErrorMessage("Name does not match \"[a-zA-Z0-9_]+\"");
        } else {
            File file = new File(this.context.getDataDir() + File.separator + "shared_prefs" + File.separator + PREFIX + name + SUFFIX);
            if (!this.files.contains(file)) {
                this.add(file);
                this.files.add(file);
            }
            status = this.spc.save(this.stripSuffix(file.getName()));
        }
        this.log.viewStatusMessage(status);
    }

    /**
     * Strip the suffix.
     */
    private String stripSuffix(@NonNull String name) {
        return name.substring(0, name.length() - SUFFIX.length());
    }

}