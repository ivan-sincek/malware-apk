package com.kira.malware.controllers;

import android.content.ComponentName;
import android.content.Intent;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Bundle;
import android.text.SpannableStringBuilder;
import android.view.View;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.core.content.res.ResourcesCompat;

import com.kira.malware.models.LogModel;
import com.kira.malware.R;

import org.json.JSONArray;
import org.json.JSONException;

public class LogController {

    private TextView wrap, status, save, cancel, clear, log;
    private Resources resources;
    private boolean wrapped;

    public LogController(@NonNull View view) {
        this.wrapped = true;
        this.wrap = view.findViewById(R.id.text_view_log_wrap);
        this.wrap.setOnClickListener(v -> {
            // TO DO: Text wrapping.
            this.wrapped = !this.wrapped;
            this.wrap.setText(this.wrapped ? R.string.log_unwrap : R.string.log_wrap);
        });
        this.status = view.findViewById(R.id.text_view_log_status);
        this.save = view.findViewById(R.id.text_view_log_save);
        this.cancel = view.findViewById(R.id.text_view_log_cancel);
        this.clear = view.findViewById(R.id.text_view_log_clear);
        this.clear.setOnClickListener(v -> {
            this.clear();
        });
        this.log = view.findViewById(R.id.text_view_log);

        this.resources = view.getResources();
    }

    /**
     * Get the save button - for example, to set a listener (action) in a fragment.
     */
    public TextView getSave() {
        return this.save;
    }

    /**
     * Get the cancel button - for example, to set a listener (action) in a fragment.
     */
    public TextView getCancel() {
        return this.cancel;
    }

    /**
     * Get the log view - for example, to set a listener (action) in a fragment. Cast it to TextInputEditText for more options.
     */
    public TextView getLog() {
        return this.log;
    }

    /**
     * Get the log's text. Used for file editing.
     */
    public String getText() {
        return this.log.getText().toString();
    }

    /**
     * Set the log's text.
     */
    public void setText(@NonNull SpannableStringBuilder text) {
        this.log.setText(text);
    }

    /**
     * Set the log's text.
     */
    public void setText(@NonNull String text) {
        this.log.setText(text);
    }

    private void appendNewLine() {
        if (this.log.getText().length() > 0) {
            this.log.append(System.lineSeparator());
        }
    }

    /**
     * Append text to the log.
     */
    public void appendText(@NonNull SpannableStringBuilder text) {
        this.appendNewLine();
        this.log.append(text);
    }

    /**
     * Append text to the log.
     */
    public void appendText(@NonNull String text) {
        this.appendNewLine();
        this.log.append(text);
    }

    /**
     * Clear the status and log.
     */
    private void clear() {
        this.status.setText("");
        this.log.setText("");
    }

    /**
     * Show the edit file view.
     */
    public void showEditFile(boolean visible) {
        this.clear();

        this.status.setVisibility(visible ? View.GONE : View.VISIBLE);
        this.clear.setVisibility(visible ? View.GONE : View.VISIBLE);

        this.save.setVisibility(visible ? View.VISIBLE : View.GONE);
        this.cancel.setVisibility(visible ? View.VISIBLE : View.GONE);

        this.log.setTextColor(ResourcesCompat.getColor(this.resources, visible ? R.color.text_input_edit : R.color.log_text, null));
        this.log.setEnabled(visible);
        this.log.setFocusable(visible);
        this.log.setFocusableInTouchMode(visible);
    }

    /**
     * Show the LogModel's status.
     */
    public void viewStatus(@NonNull LogModel status) {
        this.status.setTextColor(ResourcesCompat.getColor(this.resources, status.getSuccess() ? R.color.log_status_ok : R.color.log_status_error, null));
        this.status.setText(status.getSuccess() ? R.string.log_status_ok : R.string.log_status_error);
    }

    /**
     * Show the LogModel's message.
     */
    public void viewMessage(@NonNull LogModel status) {
        this.status.setText("");
        this.log.setText(status.getMessage());
    }

    /**
     * Show the LogModel's status and message.
     */
    public void viewStatusMessage(@NonNull LogModel status) {
        this.viewMessage(status);
        this.viewStatus(status);
    }

    /**
     * Append an intent dump to the log. Used in HiddenActivity.
     */
    public void appendIntentDump(@NonNull Intent intent) {
        this.appendText(FormatController.formatMessage("---------- INTENT BEGIN ----------", FormatController.Type.INFO));
        ComponentName componentName = intent.getComponent();
        if (componentName != null) {
            this.appendText(String.format("Activity: %s", componentName.getClassName()));
        }
        String action = intent.getAction();
        if (action != null) {
            this.appendText(String.format("Action: %s", action));
        }
        Uri uri = intent.getData();
        if (uri != null) {
            this.appendText(String.format("URI: %s", uri));
        }
        this.appendText(String.format("Flags: %s", intent.getFlags()));
        String type = intent.getType();
        if (type != null) {
            this.appendText(String.format("Type: %s", type));
        }
        Bundle extras = intent.getExtras();
        if (extras != null) {
            for (String key : extras.keySet()) {
                Object obj = extras.get(key);
                String value = "null";
                String valueType = "";
                if (obj != null) {
                    try {
                        valueType = obj.getClass().getSimpleName();
                        value = (obj.getClass().isArray() ? new JSONArray(obj) : obj).toString();
                    } catch (JSONException e) {
                        value = e.getMessage();
                    }
                }
                this.appendText(String.format("Extra \"%s\" (%s): %s", key, valueType, value));
            }
        }
    }

}