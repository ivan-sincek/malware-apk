package com.kira.malware.controllers;

import android.content.Context;
import android.content.SharedPreferences;

import androidx.annotation.NonNull;

import com.kira.malware.models.LogModel;

import java.util.Map;

public class SharedPreferencesController {
    private static final String DEFAULT = "com.kira.malware.state.default";
    private static final int MODE = Context.MODE_PRIVATE;
    private Context context;
    private static SharedPreferencesController instance;
    /**
     * Current UI state.
     */
    private SharedPreferences sharedPreferences;

    private SharedPreferencesController(@NonNull Context context) {
        this.context = context.getApplicationContext();
        this.sharedPreferences = this.context.getSharedPreferences(DEFAULT, MODE);
    }

    public static synchronized SharedPreferencesController getInstance(@NonNull Context context) {
        if (instance == null) {
            instance = new SharedPreferencesController(context);
        }
        return instance;
    }

    public SharedPreferences getSharedPreferences() {
        return this.sharedPreferences;
    }

    public String getString(@NonNull String key, @NonNull String defValue) {
        return this.sharedPreferences.getString(key, defValue);
    }

    public void putString(@NonNull String key, @NonNull String value) {
        SharedPreferences.Editor editor = this.sharedPreferences.edit();
        editor.putString(key, value);
        editor.apply();
    }

    public int getInt(@NonNull String key, int defValue) {
        return this.sharedPreferences.getInt(key, defValue);
    }

    public void putInt(@NonNull String key, int value) {
        SharedPreferences.Editor editor = this.sharedPreferences.edit();
        editor.putInt(key, value);
        editor.apply();
    }

    /**
     * Save the current UI state in a shared preferences file.
     */
    public LogModel save(@NonNull String name) {
        SharedPreferences.Editor editor = this.context.getSharedPreferences(name, MODE).edit();
        editor.clear();
        for (Map.Entry<String, ?> entry : this.sharedPreferences.getAll().entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();
            if (value instanceof String) {
                editor.putString(key, (String) value);
            } else if (value instanceof Integer) {
                editor.putInt(key, (Integer) value);
            }
        }
        editor.apply();
        return new LogModel(true, String.format("\"%s.xml\" UI state was saved successfully", name), FormatController.Type.SUCCESS);
    }

    /**
     * Load the current UI state from a shared preferences file.
     */
    public LogModel load(@NonNull String name) {
        SharedPreferences.Editor editor = this.sharedPreferences.edit();
        editor.clear();
        for (Map.Entry<String, ?> entry : this.context.getSharedPreferences(name, MODE).getAll().entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();
            if (value instanceof String) {
                editor.putString(key, (String) value);
            } else if (value instanceof Integer) {
                editor.putInt(key, (Integer) value);
            }
        }
        editor.apply();
        return new LogModel(true, String.format("\"%s.xml\" UI state was loaded successfully", name), FormatController.Type.SUCCESS);
    }

}