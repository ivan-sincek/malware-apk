package com.kira.malware.activities;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import com.kira.malware.controllers.ContentResolverController;
import com.kira.malware.controllers.ExplicitIntentController;
import com.kira.malware.controllers.LogController;
import com.kira.malware.models.LogModel;
import com.kira.malware.R;

/**
 * Callback hidden activity.
 */
public class HiddenActivity extends AppCompatActivity {

    private LogController log;

    /**
     * Add more callbacks (actions) here.
     */
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_hidden);

        View view = findViewById(android.R.id.content);
        this.log = new LogController(view);

        Intent intent = getIntent();
        if (intent != null) {
            String scheme = intent.getScheme();
            Uri uri = intent.getData();
            Bundle extras = intent.getExtras();
            if (extras != null) {
                if (extras.containsKey(ExplicitIntentController.LOG_MODEL_SUCCESS) && extras.containsKey(ExplicitIntentController.LOG_MODEL_MESSAGE)) {
                    // NOTE: For testing explicit intents.
                    String message = extras.getString(ExplicitIntentController.LOG_MODEL_MESSAGE);
                    if (message != null) {
                        this.log.viewStatusMessage(new LogModel(extras.getBoolean(ExplicitIntentController.LOG_MODEL_SUCCESS), message));
                    }
                } else if (extras.containsKey(ContentResolverController.FILE_PROVIDER_KEY) && ContentResolverController.FILE_PROVIDER_VALUE.equals(extras.getString(ContentResolverController.FILE_PROVIDER_KEY)) && uri != null) {
                    // NOTE: For testing implicit intent injections.
                    this.log.viewStatusMessage(ContentResolverController.fileProvider(this, uri));
                } else if (extras.containsKey(ContentResolverController.SQLITE_PROVIDER_KEY) && ContentResolverController.SQLITE_PROVIDER_VALUE.equals(extras.getString(ContentResolverController.SQLITE_PROVIDER_KEY)) && uri != null) {
                    // NOTE: For testing implicit intent injections.
                    this.log.viewStatusMessage(ContentResolverController.sqliteProvider(this, uri));
                }
            }
            this.log.appendIntentDump(intent);
        }
    }

}