package com.kira.malware.fragments;

import android.content.Context;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.WebView;

import androidx.activity.OnBackPressedCallback;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;

import com.google.android.material.textfield.TextInputEditText;

import com.kira.malware.controllers.ImplicitIntentController;
import com.kira.malware.controllers.LogController;
import com.kira.malware.controllers.SharedPreferencesController;
import com.kira.malware.controllers.WebController;
import com.kira.malware.models.LogModel;
import com.kira.malware.R;

import java.util.HashMap;
import java.util.Map;

public class WebFragment extends Fragment {

    private OnBackPressedCallback callback;
    private Context context;
    private SharedPreferencesController spc;
    private LogController log;
    private TextInputEditText inputUrl, inputPackageName;
    private String url = "https://github.com/ivan-sincek", packageName = "com.android.chrome"; // NOTE: Samsung web browser: com.sec.android.app.sbrowser

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_web, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        this.context = view.getContext();
        this.spc = SharedPreferencesController.getInstance(this.context);
        this.log = new LogController(view);
        this.log.appendText("Tip #1: Initiate a deep link callback from a website");
        this.log.appendText("");
        this.log.appendText("Tip #2: Create further exploitation steps inside the code using OkHttp, intents, etc., and rebuild the APK");

        this.url = this.spc.getString("web_url", this.url);
        this.packageName = this.spc.getString("web_package_name", this.packageName);

        this.inputUrl = view.findViewById(R.id.text_input_web_url);
        this.inputUrl.setText(this.url);
        this.inputUrl.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                url = editable.toString().trim();
            }
        });

        this.inputPackageName = view.findViewById(R.id.text_input_web_browser_package_name);
        this.inputPackageName.setText(this.packageName);
        this.inputPackageName.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                packageName = editable.toString().trim();
            }
        });

        view.findViewById(R.id.button_web_http_send).setOnClickListener(v -> {
            LogModel status = new LogModel();
            if (this.url.length() < 1) {
                status.appendErrorMessage("URL is required");
            }
            if (status.getMessage().length() < 1) {
                // NOTE: Add more HTTP request headers here.
                Map<String, String> headers = new HashMap<String, String>() {{
                    put("User-Agent", "Kira/3.30.1");
                }};
                status = WebController.get(this.url, headers);
            }
            this.log.viewStatusMessage(status);
        });

        view.findViewById(R.id.button_web_webview_open).setOnClickListener(v -> {
            LogModel status = new LogModel();
            if (this.url.length() < 1) {
                status.appendErrorMessage("URL is required");
            }
            if (status.getMessage().length() < 1) {
                WebView webView = view.findViewById(R.id.webview_webview);
                webView.getSettings().setJavaScriptEnabled(true); // NOTE: This WebView is insecure on purpose.
                webView.loadUrl(this.url);
                status.setSuccess(true);
                status.setSuccessMessage("WebView was launched successfully");
                this.showWebView(true);
            }
            this.log.viewStatusMessage(status);
        });

        view.findViewById(R.id.text_view_webview_close).setOnClickListener(v -> {
            this.showWebView(false);
        });

        view.findViewById(R.id.button_web_browser_launch).setOnClickListener(v -> {
            LogModel status = new LogModel();
            if (this.url.length() < 1) {
                status.appendErrorMessage("URL is required");
            }
            if (this.packageName.length() < 1) {
                status.appendErrorMessage("Browser package name is required");
            }
            if (status.getMessage().length() < 1) {
                status = ImplicitIntentController.launchTabsIntent(this.context, this.packageName, this.url);
            }
            this.log.viewStatusMessage(status);
        });
    }

    /**
     * Show the WebView.
     */
    private void showWebView(boolean visible) {
        View view = this.requireView();
        view.findViewById(R.id.linear_layout_web_main).setVisibility(visible ? View.GONE : View.VISIBLE);
        view.findViewById(R.id.include_webview).setVisibility(visible ? View.VISIBLE : View.GONE);
        this.callback.setEnabled(visible);
    }

    @Override
    public void onAttach(@NonNull Context context) {
        super.onAttach(context);
        this.callback = new OnBackPressedCallback(false) {
            @Override
            public void handleOnBackPressed() {
                showWebView(false);
            }
        };
        this.requireActivity().getOnBackPressedDispatcher().addCallback(this, this.callback);
    }

    @Override
    public void onDetach() {
        super.onDetach();
        this.callback.remove();
    }

    @Override
    public void onResume() {
        super.onResume();

        if (this.requireView().findViewById(R.id.linear_layout_web_main).getVisibility() == View.GONE) {
            this.callback.setEnabled(true);
        }

        this.url = this.spc.getString("web_url", this.url);
        this.packageName = this.spc.getString("web_package_name", this.packageName);

        this.inputUrl.setText(this.url);
        this.inputPackageName.setText(this.packageName);
    }

    @Override
    public void onPause() {
        super.onPause();

        if (this.requireView().findViewById(R.id.linear_layout_web_main).getVisibility() == View.GONE) {
            this.callback.setEnabled(false);
        }

        this.spc.putString("web_url", this.url);
        this.spc.putString("web_package_name", this.packageName);
    }

}