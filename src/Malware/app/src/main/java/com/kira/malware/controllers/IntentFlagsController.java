package com.kira.malware.controllers;

import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import com.kira.malware.models.IntentFlagModel;
import com.kira.malware.R;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class IntentFlagsController {

    private Context context;
    private LinearLayout layout;
    private boolean single;
    private List<IntentFlagModel> flags;
    private static final int PROXY_LABEL = 0, PROXY_CHECKBOX = 1, TARGET_LABEL = 2, TARGET_CHECKBOX = 3, MAIN_LABEL = 4;

    /**
     * Edit default and add more intent flags here.
     */
    public IntentFlagsController(@NonNull View view, boolean single) {
        this.context = view.getContext();

        this.layout = view.findViewById(R.id.linear_layout_intent_flags);
        this.single = single;

        this.flags = new ArrayList<IntentFlagModel>() {{
            if (single) {
                add(new IntentFlagModel("FLAG_ACTIVITY_NO_ANIMATION", Intent.FLAG_ACTIVITY_NO_ANIMATION, false, true));
                add(new IntentFlagModel("FLAG_ACTIVITY_NO_HISTORY", Intent.FLAG_ACTIVITY_NO_HISTORY, false, true));
                add(new IntentFlagModel("FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS", Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS, false, true));
            }
            add(new IntentFlagModel("FLAG_ACTIVITY_CLEAR_TASK", Intent.FLAG_ACTIVITY_CLEAR_TASK, false, true));
            add(new IntentFlagModel("FLAG_ACTIVITY_NEW_TASK", Intent.FLAG_ACTIVITY_NEW_TASK, false, true));
            add(new IntentFlagModel("FLAG_ACTIVITY_MULTIPLE_TASK", Intent.FLAG_ACTIVITY_MULTIPLE_TASK, false, false));
            add(new IntentFlagModel("FLAG_ACTIVITY_LAUNCH_ADJACENT", Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT, false, false));
            add(new IntentFlagModel("FLAG_ACTIVITY_PREVIOUS_IS_TOP", Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP, false, false));
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                add(new IntentFlagModel("FLAG_ACTIVITY_REQUIRE_NON_BROWSER", Intent.FLAG_ACTIVITY_REQUIRE_NON_BROWSER, false, false));
            }
            add(new IntentFlagModel("FLAG_GRANT_READ_URI_PERMISSION", Intent.FLAG_GRANT_READ_URI_PERMISSION, true, false));
            add(new IntentFlagModel("FLAG_GRANT_WRITE_URI_PERMISSION", Intent.FLAG_GRANT_WRITE_URI_PERMISSION, true, false));
            add(new IntentFlagModel("FLAG_GRANT_PREFIX_URI_PERMISSION", Intent.FLAG_GRANT_PREFIX_URI_PERMISSION, true, false));
            add(new IntentFlagModel("FLAG_GRANT_PERSISTABLE_URI_PERMISSION", Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION, true, false));
        }};
    }

    /**
     * Add intent flags to the UI.
     */
    public void show() {
        this.layout.removeAllViews();
        for (IntentFlagModel flag : this.flags) {
            this.add(flag);
        }
    }

    /**
     * Restore from a JSON string, and then add intent flags to the UI.
     */
    public void show(@NonNull String json) {
        if (json.length() > 0) {
            this.fromJson(json);
        }
        this.show();
    }

    private void add(@NonNull IntentFlagModel flag) {
        LinearLayout row = ((LayoutInflater) this.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.intent_flag, null).findViewById(R.id.linear_layout_intent_flag);
        row.setId(View.generateViewId());

        CheckBox inputProxy = (CheckBox) row.getChildAt(PROXY_CHECKBOX);
        inputProxy.setChecked(flag.getProxy());
        inputProxy.setOnCheckedChangeListener((compoundButton, checked) -> {
            flag.setProxy(checked);
        });

        CheckBox inputTarget = (CheckBox) row.getChildAt(TARGET_CHECKBOX);
        inputTarget.setChecked(flag.getTarget());
        inputTarget.setOnCheckedChangeListener((compoundButton, checked) -> {
            flag.setTarget(checked);
        });

        ((TextView) row.getChildAt(MAIN_LABEL)).setText(flag.getName());

        if (this.single) {
            // NOTE: Single intent view.
            for (int index : new int[]{PROXY_LABEL, PROXY_CHECKBOX, TARGET_LABEL}) {
                row.getChildAt(index).setVisibility(View.GONE);
            }
        }

        this.layout.addView(row);
    }

    /**
     * Sum the checked intent flags.
     */
    private int getFlags(@NonNull String scope) {
        int total = 0;
        for (IntentFlagModel flag : this.flags) {
            if ((("proxy").equals(scope) && flag.getProxy()) || (("target").equals(scope) && flag.getTarget())) {
                total |= flag.getValue();
            }
        }
        return total;
    }

    /**
     * Use this method if having multiple intents in a view - for example, in the implicit injection fragment.
     */
    public int getProxyFlags() {
        return this.getFlags("proxy");
    }

    /**
     * Use this method if having multiple intents in a view - for example, in the implicit injection fragment.
     */
    public int getTargetFlags() {
        return this.getFlags("target");
    }

    /**
     * Use this method if having a single intent in a view - for example, in the implicit fragment.
     */
    public int getIntentFlags() {
        return this.getFlags("target");
    }

    /**
     * JSON stringify intent flags to save them in shared preferences.
     */
    public String toJson() {
        return new GsonBuilder().setPrettyPrinting().create().toJson(this.flags.toArray());
    }

    /**
     * Restore intent flags from the shared preferences from a JSON string.
     */
    public void fromJson(@NonNull String flags) {
        this.flags = new ArrayList<>(Arrays.asList(new Gson().fromJson(flags, IntentFlagModel[].class)));
    }

}