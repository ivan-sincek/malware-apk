package com.kira.malware.models;

import android.os.Bundle;
import android.text.SpannableStringBuilder;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.kira.malware.controllers.FormatController;

import java.io.File;
import java.util.List;

/**
 * Class for storing log output information and more.
 */
public class LogModel {

    /**
     * Was the called method successful?
     */
    private boolean success;
    /**
     * log output message.
     */
    private SpannableStringBuilder message;
    /**
     * Extra information, for example, to pass between methods.
     */
    private Object object;

    public LogModel() {
        this.success = false;
        this.message = new SpannableStringBuilder();
        this.object = null;
    }

    public LogModel(boolean success) {
        this.success = success;
        this.message = new SpannableStringBuilder();
        this.object = null;
    }

    public LogModel(@NonNull String message) {
        this.success = false;
        this.message = new SpannableStringBuilder(message);
        this.object = null;
    }

    public LogModel(@NonNull String message, @NonNull FormatController.Type type) {
        this.success = false;
        this.message = FormatController.formatMessage(message, type);
        this.object = null;
    }

    public LogModel(boolean success, @NonNull String message) {
        this.success = success;
        this.message = new SpannableStringBuilder(message);
        this.object = null;
    }

    public LogModel(boolean success, @NonNull String message, @NonNull FormatController.Type type) {
        this.success = success;
        this.message = FormatController.formatMessage(message, type);
        this.object = null;
    }

    public boolean getSuccess() {
        return this.success;
    }

    public void setSuccess(boolean success) {
        this.success = success;
    }

    public SpannableStringBuilder getMessage() {
        return this.message;
    }

    public void setMessage(@NonNull SpannableStringBuilder message) {
        this.message = message;
    }

    public void setMessage(@NonNull String message) {
        this.message = new SpannableStringBuilder(message);
    }

    public void setMessage(@NonNull String message, @NonNull FormatController.Type type) {
        this.message = FormatController.formatMessage(message, type);
    }

    public void setInfoMessage(@NonNull String message) {
        this.setMessage(message, FormatController.Type.INFO);
    }

    public void setSuccessMessage(@NonNull String message) {
        this.setMessage(message, FormatController.Type.SUCCESS);
    }

    public void setErrorMessage(@NonNull String message) {
        this.setMessage(message, FormatController.Type.ERROR);
    }

    public void setExceptionMessage(@NonNull String message) {
        this.setMessage(message, FormatController.Type.EXCEPTION);
    }

    private void appendNewLine() {
        if (this.message.length() > 0) {
            this.message.append(System.lineSeparator());
        }
    }

    public void appendMessage(@NonNull SpannableStringBuilder message) {
        this.appendNewLine();
        this.message.append(message);
    }

    public void appendMessage(@NonNull String message) {
        this.appendNewLine();
        this.message.append(message);
    }

    public void appendMessage(@NonNull String message, @NonNull FormatController.Type type) {
        this.appendNewLine();
        this.message.append(FormatController.formatMessage(message, type));
    }

    public void appendSuccessMessage(@NonNull String message) {
        this.appendMessage(message, FormatController.Type.SUCCESS);
    }

    public void appendErrorMessage(@NonNull String message) {
        this.appendMessage(message, FormatController.Type.ERROR);
    }

    public void appendExceptionMessage(@NonNull String message) {
        this.appendMessage(message, FormatController.Type.EXCEPTION);
    }

    public void appendInfoMessage(@NonNull String message) {
        this.appendMessage(message, FormatController.Type.INFO);
    }

    /**
     * Get the extra information, for example, to pass between methods.
     */
    public Object getObject() {
        return this.object;
    }

    /**
     * Set the extra information, for example, to pass between methods.
     */
    public void setObject(@Nullable Object object) {
        this.object = object;
    }

    /**
     * Get the extra information as "List&lt;String&gt;", for example, to pass between methods.
     */
    @SuppressWarnings("unchecked")
    public List<String> getStrings() {
        return (List<String>) this.object;
    }

    /**
     * Get the extra information as "List&lt;File&gt;", for example, to pass between methods.
     */
    @SuppressWarnings("unchecked")
    public List<File> getFiles() {
        return (List<File>) this.object;
    }

    /**
     * Get the extra information as "Bundle", for example, to pass between methods.
     */
    public Bundle getBundle() {
        return (Bundle) this.object;
    }

}