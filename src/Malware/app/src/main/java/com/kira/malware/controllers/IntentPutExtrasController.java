package com.kira.malware.controllers;

import android.content.Context;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.HorizontalScrollView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;

import androidx.annotation.NonNull;

import com.google.android.material.textfield.TextInputEditText;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import com.kira.malware.models.IntentPutExtraModel;
import com.kira.malware.models.LogModel;
import com.kira.malware.R;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

// TO DO: Add more types, including array types.
public class IntentPutExtrasController {

    private Context context;
    private TextView add, close;
    private LinearLayout layout;
    private boolean single;
    private List<IntentPutExtraModel> extras;
    private static final int ROW_0 = 0, SCOPE_DROPDOWN_MENU = 0, TYPE_DROPDOWN_MENU = 1, DELETE_BUTTON = 2, ROW_1 = 1, KEY_TEXT_INPUT = 0, ROW_2 = 2, VALUE_TEXT_INPUT = 0;
    private static final int PROXY_INDEX = 0, TARGET_INDEX = 1, STRING_INDEX = 0;
    private String[] scope, type;
    private ArrayAdapter<String> adapterScope, adapterType;
    private static final Charset ENCODING = StandardCharsets.UTF_8;

    public IntentPutExtrasController(@NonNull View view, boolean single) {
        this.context = view.getContext();

        this.add = view.findViewById(R.id.text_view_put_extras_add);
        this.add.setOnClickListener(v -> {
            IntentPutExtraModel extra = new IntentPutExtraModel();
            this.add(extra);
            this.extras.add(extra);
        });
        this.close = view.findViewById(R.id.text_view_put_extras_close);
        this.layout = view.findViewById(R.id.linear_layout_put_extras);
        this.single = single;

        this.extras = new ArrayList<>();

        if (this.single) {
            this.scope = new String[]{"intent", "skip"};
            this.type = new String[]{"string", "char", "short", "int", "float", "double", "boolean", "byte", "bytes"};
        } else {
            this.scope = new String[]{"proxy", "target", "both", "skip"};
            this.type = new String[]{"string", "char", "short", "int", "float", "double", "boolean", "byte", "bytes", ImplicitIntentController.TARGET_INTENT_LABEL, ImplicitIntentController.TARGET_INTENT_TO_URI_LABEL, ImplicitIntentController.TARGET_INTENT_TO_URI_UNSAFE_LABEL, ContentResolverController.FILE_PROVIDER_LABEL, ContentResolverController.SQLITE_PROVIDER_LABEL};
        }

        this.adapterScope = new ArrayAdapter<>(this.context, android.R.layout.simple_spinner_item, this.scope);
        this.adapterScope.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

        this.adapterType = new ArrayAdapter<>(this.context, android.R.layout.simple_spinner_item, this.type);
        this.adapterType.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    }

    /**
     * Get the close button - for example, to set a listener (action) in a fragment.
     */
    public TextView getClose() {
        return this.close;
    }

    /**
     * Add extra intent information to the UI.
     */
    public void show() {
        this.layout.removeAllViews();
        for (IntentPutExtraModel extra : this.extras) {
            this.add(extra);
        }
    }

    /**
     * Restore from a JSON string, and then add extra intent information to the UI.
     */
    public void show(@NonNull String json) {
        if (json.length() > 0) {
            this.fromJson(json);
        }
        this.show();
    }

    private void add(@NonNull IntentPutExtraModel extra) {
        LinearLayout row = ((LayoutInflater) this.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.put_extra, null).findViewById(R.id.linear_layout_put_extra);
        row.setId(View.generateViewId());

        if (this.layout.getChildCount() > 0) {
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            layoutParams.setMargins(0, 10, 0, 0); // NOTE: Adding some spacing between entries.
            row.setLayoutParams(layoutParams);
        }

        TextInputEditText inputKey = ((TextInputEditText) ((HorizontalScrollView) row.getChildAt(ROW_1)).getChildAt(KEY_TEXT_INPUT));
        inputKey.setText(extra.getKey());
        inputKey.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                extra.setKey(editable.toString().trim());
            }
        });

        TextInputEditText inputValue = ((TextInputEditText) ((HorizontalScrollView) row.getChildAt(ROW_2)).getChildAt(VALUE_TEXT_INPUT));
        inputValue.setText(extra.getValue());
        inputValue.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                extra.setValue(editable.toString().trim());
            }
        });

        Spinner inputScope = (Spinner) ((LinearLayout) row.getChildAt(ROW_0)).getChildAt(SCOPE_DROPDOWN_MENU);
        inputScope.setAdapter(this.adapterScope);
        inputScope.setSelection(extra.getScope());
        inputScope.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View v, int i, long l) {
                extra.setScope(i);
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        });

        Spinner inputType = (Spinner) ((LinearLayout) row.getChildAt(ROW_0)).getChildAt(TYPE_DROPDOWN_MENU);
        inputType.setAdapter(this.adapterType);
        inputType.setSelection(extra.getType());
        inputType.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View v, int i, long l) {
                extra.setType(i);
                if (!single) {
                    // NOTE: Autofill.
                    switch (type[extra.getType()]) {
                        case ImplicitIntentController.TARGET_INTENT_LABEL:
                            extra.setScope(PROXY_INDEX);
                            inputScope.setSelection(extra.getScope());
                            extra.setType(STRING_INDEX);
                            inputType.setSelection(extra.getType());
                            extra.setValue(ImplicitIntentController.TARGET_INTENT_PLACEHOLDER);
                            inputValue.setText(extra.getValue());
                            break;
                        case ImplicitIntentController.TARGET_INTENT_TO_URI_LABEL:
                            extra.setScope(PROXY_INDEX);
                            inputScope.setSelection(extra.getScope());
                            extra.setType(STRING_INDEX);
                            inputType.setSelection(extra.getType());
                            extra.setValue(String.format("{\"deeplink\":\"%s\"}", ImplicitIntentController.TARGET_INTENT_TO_URI_PLACEHOLDER));
                            inputValue.setText(extra.getValue());
                            break;
                        case ImplicitIntentController.TARGET_INTENT_TO_URI_UNSAFE_LABEL:
                            extra.setScope(PROXY_INDEX);
                            inputScope.setSelection(extra.getScope());
                            extra.setType(STRING_INDEX);
                            inputType.setSelection(extra.getType());
                            extra.setValue(String.format("{\"deeplink\":\"%s\"}", ImplicitIntentController.TARGET_INTENT_TO_URI_UNSAFE_PLACEHOLDER));
                            inputValue.setText(extra.getValue());
                            break;
                        case ContentResolverController.FILE_PROVIDER_LABEL:
                            extra.setScope(TARGET_INDEX);
                            inputScope.setSelection(extra.getScope());
                            extra.setType(STRING_INDEX);
                            inputType.setSelection(extra.getType());
                            extra.setKey(ContentResolverController.FILE_PROVIDER_KEY);
                            inputKey.setText(extra.getKey());
                            extra.setValue(ContentResolverController.FILE_PROVIDER_VALUE);
                            inputValue.setText(extra.getValue());
                            break;
                        case ContentResolverController.SQLITE_PROVIDER_LABEL:
                            extra.setScope(TARGET_INDEX);
                            inputScope.setSelection(extra.getScope());
                            extra.setType(STRING_INDEX);
                            inputType.setSelection(extra.getType());
                            extra.setKey(ContentResolverController.SQLITE_PROVIDER_KEY);
                            inputKey.setText(extra.getKey());
                            extra.setValue(ContentResolverController.SQLITE_PROVIDER_VALUE);
                            inputValue.setText(extra.getValue());
                            break;
                    }
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        });

        ((Button) ((LinearLayout) row.getChildAt(ROW_0)).getChildAt(DELETE_BUTTON)).setOnClickListener(v -> {
            this.layout.removeView(row);
            this.extras.remove(extra);
        });

        this.layout.addView(row);
    }

    /**
     * Format extra intent information and pack it into a bundle. Call LogModel.getBundle() to return "Bundle".
     */
    private LogModel getExtras(@NonNull String scope) {
        LogModel status = new LogModel(true);
        Bundle bundle = new Bundle();
        for (IntentPutExtraModel extra : this.extras) {
            String selected = this.scope[extra.getScope()];
            if (!selected.equals("both") && !selected.equals(scope)) {
                continue;
            }
            String key = extra.getKey(), value = extra.getValue(), type = this.type[extra.getType()];
            try {
                switch (type) {
                    case "char": {
                        bundle.putChar(key, value.toCharArray()[0]);
                        break;
                    }
                    case "short": {
                        bundle.putShort(key, (short) Integer.parseInt(value));
                        break;
                    }
                    case "int": {
                        bundle.putInt(key, Integer.parseInt(value));
                        break;
                    }
                    case "float": {
                        bundle.putFloat(key, Float.parseFloat(value));
                        break;
                    }
                    case "double": {
                        bundle.putDouble(key, Double.parseDouble(value));
                        break;
                    }
                    case "boolean": {
                        bundle.putBoolean(key, Boolean.parseBoolean(value));
                        break;
                    }
                    case "byte": {
                        bundle.putByte(key, value.getBytes(ENCODING)[0]);
                        break;
                    }
                    case "bytes": {
                        bundle.putByteArray(key, value.getBytes(ENCODING));
                        break;
                    }
                    default: {
                        bundle.putString(key, value);
                    }
                }
            } catch (NumberFormatException e) {
                status.setSuccess(false);
                status.appendExceptionMessage(String.format("Extra \"%s\" (%s): %s", key, type, e.getMessage()));
            }
        }
        if (status.getSuccess()) {
            status.setObject(bundle);
        }
        return status;
    }

    /**
     * Use this method if having multiple intents in a view - for example, in the implicit injection fragment.
     */
    public LogModel getProxyExtras() {
        return this.getExtras("proxy");
    }

    /**
     * Use this method if having multiple intents in a view - for example, in the implicit injection fragment.
     */
    public LogModel getTargetExtras() {
        return this.getExtras("target");
    }

    /**
     * Use this method if having a single intent in a view - for example, in the implicit fragment.
     */
    public LogModel getIntentExtras() {
        return this.getExtras("intent");
    }

    /**
     * JSON stringify extra intent information to save it in shared preferences.
     */
    public String toJson() {
        return new GsonBuilder().setPrettyPrinting().create().toJson(this.extras.toArray());
    }

    /**
     * Restore extra intent information from the shared preferences from a JSON string.
     */
    public void fromJson(@NonNull String extras) {
        this.extras = new ArrayList<>(Arrays.asList(new Gson().fromJson(extras, IntentPutExtraModel[].class)));
    }

}